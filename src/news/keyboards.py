from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from src.news.service import get_all_site


class NewsKeyboards:
    builder = None

    @classmethod
    async def view_menu(
            cls,
            message: types.Message

    ):
        builder = InlineKeyboardBuilder()
        buttons = [
            types.InlineKeyboardButton(
                text='üè† –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç',
                callback_data='my_office'
            ),
            types.InlineKeyboardButton(
                text='‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏',
                callback_data='news'
            ),
            types.InlineKeyboardButton(
                text='ü´¥ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏',
                callback_data='get_news'
            ),
            types.InlineKeyboardButton(
                text='‚öú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
                callback_data='instructions'
            ),

        ]
        builder.add(*buttons)
        builder.adjust(1)
        await message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é \n'
            ' –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é!',
            reply_markup=builder.as_markup()
        )
        return builder

    @classmethod
    async def view_list_site(
            cls,
            callback: types.CallbackQuery,

    ):
        builder = InlineKeyboardBuilder()
        buttons = [
            types.InlineKeyboardButton(
                text='‚¨Ö –ù–∞–∑–∞–¥',
                callback_data='back'
            ),
        ]
        for site in await get_all_site():
            buttons_site = [
                types.InlineKeyboardButton(
                    text=f'‚ö° {site.url}',
                    callback_data=f'{site.url}'
                ),
            ]
            builder.add(*buttons_site)
        builder.add(*buttons)
        builder.adjust(1)
        await callback.message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!', reply_markup=builder.as_markup()
        )
        return builder

    @classmethod
    async def view_instruction(
            cls,
            callback: types.CallbackQuery

    ):
        builder = InlineKeyboardBuilder()
        buttons = [
            types.InlineKeyboardButton(
                text='‚¨Ö –ù–∞–∑–∞–¥',
                callback_data='back2'
            ),

        ]
        builder.add(*buttons)
        builder.adjust(1)
        await callback.message.edit_text(
            '<i>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n'
            '1.–ö–Ω–æ–ø–∫–∞ –º–æ–π –∫–∞–±–∏–Ω–µ—Ç - –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –Ω–∏–∫, id,\n'
            '–Ω–∞ —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–π—Ç ru.investing.com),\n'
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —Ä–∞–∑\n'
            '(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5), —Ç–∞–º –∂–µ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å '
            '–∫–æ–ª—á–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π(–∫–Ω–æ–ø–∫–∞: "–∏–∑–º–µ–Ω–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é")\n'
            '2. –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ - –≤ –≤—ã–ø–∞–¥—é—â–µ–º –º–µ–Ω—é –µ—Å—Ç—å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞\n'
            'ru.investing.com, cryptonews.net, investfunds.ru,\n'
            '–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –æ—Ç–∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n'
            '3. –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ - –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ\n'
            '–≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏</i>',
            reply_markup=builder.as_markup(), parse_mode='html'

        )
        return builder

    @classmethod
    async def view_news(
            cls,
    ):
        builder = InlineKeyboardBuilder()
        buttons = [
            types.InlineKeyboardButton(
                text='‚¨Ö –ù–∞–∑–∞–¥',
                callback_data='back4'
            ),

        ]
        builder.add(*buttons)
        builder.adjust(1)

        return builder.as_markup()








